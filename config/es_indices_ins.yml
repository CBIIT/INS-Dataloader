# Datamodel commit 9f16446

Indices:
  # Global search
  - index_name: ins_static_pages
    type: about_file
    mapping:
      page:
        type: search_as_you_type
      title:
        type: search_as_you_type
      primaryContentImage:
        type: text
      content:
        type: object

  - index_name: home_stats
    type: neo4j
    mapping:
      num_grants:
        type: integer
      num_programs:
        type: integer
      num_projects:
        type: integer
      num_publications:
        type: integer
    cypher_query: >
      MATCH (pg:program)
        OPTIONAL MATCH (pj:project)-[:projects_of_program]->(pg)
        OPTIONAL MATCH (g:grant)-[:grants_of_project]->(pj)
        OPTIONAL MATCH (pb:publication)-[:has_publication]->(pj)
      RETURN
        COUNT(DISTINCT g) AS num_grants,
        COUNT(DISTINCT pg) AS num_programs,
        COUNT(DISTINCT pj) AS num_projects,
        COUNT(DISTINCT pb) AS num_publications;

  # Programs are many-to-many with Projects
  - index_name: programs
    type: neo4j
    mapping:
      program_id:
        type: keyword
      program_name:
        type: keyword
      program_acronym:
        type: keyword
      focus_area: # list
        type: keyword
      focus_area_str:
        type: keyword
      doc:
        type: keyword
      contact_pi:
        type: keyword
      contact_pi_email:
        type: keyword
      contact_nih:
        type: keyword
      contact_nih_email:
        type: keyword
      nofo: # list
        type: keyword
      nofo_str:
        type: keyword
      award: # list
        type: keyword
      award_str:
        type: keyword
      program_link:
        type: keyword
      data_link:
        type: keyword
    cypher_query: >
      MATCH (pg:program)
      RETURN
        pg.program_id AS program_id,
        pg.program_name AS program_name,
        pg.program_acronym AS program_acronym,
        apoc.text.split(pg.focus_area, ';') AS focus_area,
        pg.focus_area AS focus_area_str,
        pg.doc AS doc,
        pg.contact_pi AS contact_pi,
        pg.contact_pi_email AS contact_pi_email,
        pg.contact_nih AS contact_nih,
        pg.contact_nih_email AS contact_nih_email,
        apoc.text.split(pg.nofo, ';') AS nofo,
        pg.nofo AS nofo_str,
        apoc.text.split(pg.award, ';') AS award,
        pg.award AS award_str,
        pg.program_link AS program_link,
        pg.data_link AS data_link;

  # Projects are many-to-many with Programs
  - index_name: projects
    type: neo4j
    mapping:
      project_id:
        type: keyword
      project_title:
        type: keyword
      abstract_text:
        type: keyword
      project_start_date:
        type: date
      project_end_date:
        type: date
      opportunity_number:
        type: keyword
      opportunity_number_str:
        type: keyword
      org_name:
        type: keyword
      org_city:
        type: keyword
      org_state:
        type: keyword
      org_country:
        type: keyword
      # Programs
      programs:
        type: nested
        properties:
          focus_area: # list
            type: keyword
          program_name:
            type: keyword
    cypher_query: >
      MATCH (pg:program)<-[:projects_of_program]-(pj:project)
      RETURN
        pj.project_id AS project_id,
        pj.project_title AS project_title,
        pj.abstract_text AS abstract_text,
        pj.project_start_date AS project_start_date,
        pj.project_end_date AS project_end_date,
        pj.opportunity_number AS opportunity_number,
        pj.opportunity_number_str AS opportunity_number_str,
        pj.org_name AS org_name,
        pj.org_city AS org_city,
        pj.org_state AS org_state,
        pj.org_country AS org_country,
        COLLECT(DISTINCT({
          focus_area: apoc.text.split(pg.focus_area, ';'),
          program_name: pg.program_name
        })) AS programs;
